{"version":3,"file":"sf-animated-text.js","sourceRoot":"","sources":["src/sf-animated-text.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAmB,MAAM,KAAK,CAAC;AAC5D,0FAA0F;AAC1F,wCAAwC;AACxC,+CAA+C;AAC/C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,6CAA6C;AAC7C,mDAAmD;AAGnD;;;;;EAKE;AAEF;;;;;;;;;;GAUG;AAEH,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,UAAU;IAmE5C;QACE,KAAK,EAAE,CAAC;QAlEV,UAAK,GAAG,CAAC,CAAC;QAQV,aAAQ,GAAG,GAAG,EAAE;YACd,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC/B,CAAC,CAAA;QAGD,WAAM,GAAW,EAAE,CAAC;QAEpB,cAAS,GAAG,GAAG,EAAE;YACf,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAChC,CAAC,CAAA;QAGD,UAAK,GAAW,CAAC,CAAC;QAUlB,aAAQ,GAAG,KAAK,IAAI,EAAE;YAEpB,8CAA8C;YAE9C,IAAG,IAAI,CAAC,IAAI,IAAI,SAAS,EAAE;gBAEzB,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,MAAM,EAAE,CAAC;oBACd,IAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC1C,IAAI,CAAC,KAAK,EAAE,CAAC;qBACd;yBAAM;wBACL,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;qBAChB;oBACD,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClB,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAC,EAAE,CAAC,CAAC;aAE/C;iBAAM;gBAEL,UAAU,CAAC,GAAG,EAAE;oBACd,IAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC3C,IAAI,CAAC,KAAK,EAAE,CAAC;qBACd;yBAAM;wBACL,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;qBAChB;oBACD,IAAI,CAAC,MAAM,EAAE,CAAC;oBAEd,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClB,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAC,EAAE,CAAC,CAAC;aAE/C;QAIH,CAAC,CAAA;IAID,CAAC;IAEkB,YAAY,CAAC,kBAAqE;QAEnG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAElB,CAAC;IAEQ,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAA;IAC3B,CAAC;IAEQ,MAAM;QAEb,OAAO,IAAI,CAAA;;UAEL,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;;;KAGhC,CAAC;IACJ,CAAC;CAEF,CAAA;AAnEiB,qBAAM,GAAG,GAAG,CAAA;;;;;;GAM1B,CAAA;AAzBF;IADC,QAAQ,EAAE;4CACG;AAGd;IADC,QAAQ,EAAE;6CACI;AAOf;IADC,QAAQ,EAAE;8CACS;AAOpB;IADC,QAAQ,EAAE;6CACO;AAtBP,cAAc;IAD1B,aAAa,CAAC,kBAAkB,CAAC;GACrB,cAAc,CA2F1B;SA3FY,cAAc","sourcesContent":["/**\n * @license\n * Copyright 2022 Superflow.dev\n * SPDX-License-Identifier: MIT\n */\n\nimport {LitElement, html, css, PropertyValueMap} from 'lit';\n//import {customElement, query, queryAssignedElements, property} from 'lit/decorators.js';\n//import {SfISelect} from 'sf-i-select';\n//import {SfISubSelect} from 'sf-i-sub-select';\nimport {customElement, property} from 'lit/decorators.js';\n// import {LitElement, html, css} from 'lit';\n// import {customElement} from 'lit/decorators.js';\n\n\n/*\n\nModes: View, Add, Edit, Delete, Admin\nDB: partitionKey, rangeKey, values\n\n*/\n\n/**\n * SfAnimatedText element.\n * @fires renderComplete - When the list is populated\n * @fires valueChanged - When the value is changed\n * @property apiId - backend api id\n * @property label - input label\n * @property name - name of the input\n * @property mode - mode of operation\n * @property selectedId - id to preselect\n * @property selectedValue - callback function\n */\n@customElement('sf-animated-text')\nexport class SfAnimatedText extends LitElement {\n  \n  DELAY = 0;\n\n  @property()\n  mode!: string;\n\n  @property()\n  texts!: string;\n\n  getTexts = () => {\n    return JSON.parse(this.texts)\n  }\n\n  @property()\n  delays: string = \"\";\n\n  getDelays = () => {\n    return JSON.parse(this.delays)\n  }\n\n  @property()\n  count: number = 0;\n\n  static override styles = css`\n    \n    .SfAnimatedTextC {\n      \n    }\n\n  `;\n\n  loadMode = async () => {\n\n    //console.log(this.getDelays()[this.count++]);\n\n    if(this.mode == \"replace\") {\n\n      setTimeout(() => {\n        this.render();\n        if(this.count < this.getTexts().length - 1) {\n          this.count++;\n        } else {\n          this.count = 0;\n        }\n        this.loadMode();\n      }, parseInt(this.getDelays()[this.count])*75);\n\n    } else {\n\n      setTimeout(() => {\n        if(this.count < this.getDelays().length - 1) {\n          this.count++;\n        } else {\n          this.count = 0;\n        }\n        this.render();\n\n        this.loadMode();\n      }, parseInt(this.getDelays()[this.count])*75);\n\n    }\n\n\n\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected override firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void {\n\n    this.loadMode();\n\n  }\n  \n  override connectedCallback() {\n    super.connectedCallback()\n  }\n  \n  override render() {\n\n    return html`\n      <div class=\"SfAnimatedTextC\" part=\"text\">\n        ${this.getTexts()[this.count]}\n      </div>\n\n    `;\n  }\n\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sf-animated-text': SfAnimatedText;\n  }\n}\n"]}